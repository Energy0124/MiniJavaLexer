options
{
  JAVA_UNICODE_ESCAPE = true;
  //  DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(MiniJavaParser)
import java.util.*;

public class MiniJavaParser
{
  public static int lastOpenCommentLine = - 1;

  /** Main entry point. */
  public static void main(String args []) throws ParseException
  {
    MiniJavaParser parser = new MiniJavaParser(System.in);
    //    parser.Program();
    //    parser.Goal();
    Map < String, Integer > identifierMap = new TreeMap < String, Integer > ();
    Map < String, Integer > tokenMap = new TreeMap < String, Integer > ();
    Token t;
    while (true)
    { // Retrieve token one by one
      try
      {
        t = parser.getNextToken();
        //if (t.specialToken != null) System.out.println(t.specialToken);
        if (t.kind == EOF)
        { // EOF 
          break;
        }
        else if (t.kind == UNMATCHED_COMMENT)
        {
          System.out.println("Line " + t.beginLine + ": Unmatched */");
          //System.out.println("UNMATCHED_COMMENT " + t.beginLine + ":" + t.beginColumn + ":" + t.kind + ":" + t.image);
        }
        else if (t.kind == UNEXPECTED_CHAR)
        {
          System.out.println("Line " + t.beginLine + ": Invalid character '" + t.image + "'");
          //System.out.println("UNEXPECTED_CHAR " + t.beginLine + ":" + t.beginColumn + ":" + t.kind + ":" + t.image);
        }
        else if (t.kind == INTEGER_LITERAL)
        {
          System.out.println("Line " + t.beginLine + ": " + t.image);
          //System.out.println("INTEGER_LITERAL " + t.beginLine + ":" + t.beginColumn + ":" + t.kind + ":" + t.image);
        }
        else if (t.kind == IDENTIFIER)
        {
          int count = identifierMap.containsKey(t.image) ? identifierMap.get(t.image) : 0;
          identifierMap.put(t.image, count + 1);
          //System.out.println("IDENTIFIER " + t.beginLine + ":" + t.beginColumn + ":" + t.kind + ":" + t.image);
        }
        else
        {
          int count = tokenMap.containsKey(t.image) ? tokenMap.get(t.image) : 0;
          tokenMap.put(t.image, count + 1);
          //System.out.println("TOKEN " + t.beginLine + ":" + t.beginColumn + ":" + t.kind + ":" + t.image);
        }
      }
      catch (TokenMgrError e)
      {
        if (token_source.curLexState == IN_MULTI_LINE_COMMENT)
        {
          System.out.println("Line " + MiniJavaParser.lastOpenCommentLine + ": EOF in comment");
          //          e.printStackTrace();
          return;
        }
      }
    }
    for (Map.Entry < String, Integer > pair : identifierMap.entrySet())
    {
      System.out.println(pair.getKey() + ": " + pair.getValue());
    }
    for (Map.Entry < String, Integer > pair : tokenMap.entrySet())
    {
      System.out.println(pair.getKey() + ": " + pair.getValue());
    }
  }
}

PARSER_END(MiniJavaParser)

// Insert a specification of a lexical analysis here.
/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
| "/*"
  {
    MiniJavaParser.lastOpenCommentLine = input_stream.getBeginLine();
  }
  : IN_MULTI_LINE_COMMENT
}

< IN_SINGLE_LINE_COMMENT >
SPECIAL_TOKEN :
{
  < SINGLE_LINE_COMMENT :
    "\n"
  | "\r"
  | "\r\n" > : DEFAULT
}

< IN_SINGLE_LINE_COMMENT >
MORE :
{
  < ~[ ] >
}

< IN_MULTI_LINE_COMMENT >
SPECIAL_TOKEN :
{
  < MULTI_LINE_COMMENT : "*/" > : DEFAULT
}

< IN_MULTI_LINE_COMMENT >
MORE :
{
  < ~[ ] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < BOOLEAN : "boolean" >
| < CLASS : "class" >
| < ELSE : "else" >
| < EXTENDS : "extends" >
| < FALSE : "false" >
| < IF : "if" >
| < INT : "int" >
| < NEW : "new" >
| < PUBLIC : "public" >
| < RETURN : "return" >
| < STATIC : "static" >
| < THIS : "this" >
| < TRUE : "true" >
| < VOID : "void" >
| < WHILE : "while" >
| < PRINT : "System.out.println" >
| < MAIN : "main" >
| < STRING : "String" >
| < LENGTH : "length" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL >
  | < HEX_LITERAL >
  | < OCTAL_LITERAL > 
  >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
  //| < INVALID_HEX : "0" [ "x", "X" ] ([ "0"-"9", "a"-"z", "A"-"Z" ])* >
  //| < INVALID_OCTAL : "0" ([ "0"-"9" ])* >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : 
    [ 
    "$", 
    "A"-"Z", 
    "_", 
    "a"-"z" 
    ] 
  >
| 
  < #DIGIT : 
    [ 
    "0"-"9" 
    ] 
  >
}

TOKEN : /* SEPARATORS */
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < DOT : "." >
}

TOKEN : /* OPERATORS */
{
  < LT : "<" >
| < BANG : "!" >
| < SC_AND : "&&" >
| < PLUS : "+" >
| < MINUS : "-" >
| < STAR : "*" >
| < ASSIGN : "=" >
}

TOKEN : /* UNMATCHED_COMMENT */
{
  < UNMATCHED_COMMENT : "*/" >
}

<* >
TOKEN : /* UNEXPECTED_CHAR */
{
  < UNEXPECTED_CHAR : ~[ ] >
}

//MiniJava Grammar
void Program() :
{}
{
  MainClass()
  (
    ClassDeclaration()
  )*
  < EOF >
}

void MainClass() :
{}
{
  "class" < IDENTIFIER > "{" "public" "static" "void" "main" "(" "String" "[" "]" < IDENTIFIER > ")" "{" Statement() "}" "}"
}

void ClassDeclaration() :
{}
{
  "class" < IDENTIFIER > 
  (
  "extends" < IDENTIFIER >
  )? 
  "{"
  (
    VarDeclaration()
  )*
  (
    MethodDeclaration()
  )*
  "}"
}

void VarDeclaration() :
{}
{
  Type() < IDENTIFIER > ";"
}

void MethodDeclaration() :
{}
{
  "public" Type() < IDENTIFIER > "("
  (
    Type() < IDENTIFIER >
    (
      "," Type() < IDENTIFIER >
    )*
  )?
  ")" "{"
  (
    LOOKAHEAD(2)
    VarDeclaration()
  )*
  (
    Statement()
  )*
  "return" Expression() ";" "}"
}

void Type() :
{}
{
  "int" [ "[" "]" ]
| 	"boolean"
| 	< IDENTIFIER >
}

void Statement() :
{}
{
  "{"
  (
    Statement()
  )*
  "}"
| 	"if" "(" Expression() ")" Statement() "else" Statement()
| 	"while" "(" Expression() ")" Statement()
| 	"System.out.println" "(" Expression() ")" ";"
| 	< IDENTIFIER >
  (
    "=" Expression() ";"
  | "[" Expression() "]" "=" Expression() ";"
  )
}

void Expression() :
{}
{
  And()
  //  Expression()
  //  (
  //    "&&"
  //  | "<"
  //  | "+"
  //  | "-"
  //  | "*"
  //  )
  //  Expression()
  //| 	Expression() "[" Expression() "]"
  //| 	Expression() "." "length"
  //| 	Expression() "." < IDENTIFIER > "("
  //  (
  //    Expression()
  //    (
  //      "," Expression()
  //    )*
  //  )?
  //  ")"
  //| 	< INTEGER_LITERAL >
  //| 	"true"
  //| 	"false"
  //| 	< IDENTIFIER >
  //| 	"this"
  //| 	"new" "int" "[" Expression() "]"
  //| 	"new" < IDENTIFIER > "(" ")"
  //| 	"!" Expression()
  //| 	"(" Expression() ")"
}

void And() :
{}
{
  LessThan()
  (
    LOOKAHEAD(2)
    "&&" LessThan()
  )*
}

void LessThan() :
{}
{
  AdditiveExp()
  [
    LOOKAHEAD(2)
    "<" AdditiveExp()
  ]
}

void AdditiveExp() :
{}
{
  Times()
  (
    LOOKAHEAD(2)
    (
      "+"
    | "-"
    )
    Times()
  )*
}

void Times() :
{}
{
  PrefixExp()
  (
    LOOKAHEAD(2)
    "*" PrefixExp()
  )*
}

void PrefixExp() :
{}
{
  Not()
| PostfixExp()
}

void Not() :
{}
{
  ("!")+ PostfixExp()
}

void PostfixExp() :
{}
{
  PrimaryExp()
  (
    "[" Expression() "]"
  | "."
    (
      < IDENTIFIER > "(" ExpressionList() ")"
    | "length"
    )
  )*
}

void PrimaryExp() :
{}
{
  < INTEGER_LITERAL >
| 	"true"
| 	"false"
| 	< IDENTIFIER >
| 	"this"
| 	"new"
  (
    "int" "[" Expression() "]"
  | < IDENTIFIER > "(" ")"
  )
| 	"(" Expression() ")"
}

void ExpressionList() :
{}
{
  (
    Expression()
    (
      "," Expression()
    )*
  )?
}

// The following is a simple grammar that will allow you
// to test the generated lexer.
void Goal() :
{}
{
  (
    MiniJavaToken()
  )*
  < EOF >
}

void MiniJavaToken() :
{}
{
  "class"
| "{"
| "public"
| "static"
| "void"
| "main"
| "("
| "String"
| "["
| "]"
| ")"
| "}"
| "extends"
| ";"
| "return"
| ","
| "int"
| "boolean"
| "="
| "if"
| "else"
| "while"
| "System.out.println"
| "&&"
| "<"
| "+"
| "-"
| "*"
| "."
| "length"
| "true"
| "false"
| "this"
| "new"
| "!"
| < INTEGER_LITERAL >
| < IDENTIFIER >
}
